def analyze_relation(R):
    reflexive = True
    n=len(R)
    for i in range(n):
        if (not(R[i][i])):
            reflexive = False

    symmetric = True
    for i in range(n):
        for j in range(n):
            if not(R[i][j]==R[j][i]):
                symmetric = False

    transitive = True
    for i in range(n):
        for j in range(n):
            for k in range(n):
                if (not (R[i][j] and R[j][k] <= R[i][k])):
                    transitive = False
    suryect= True
    for j in range(n):
        one = False
        for i in range(n):
            if R[i][j]:
                one = True
        if not one:
            suryect = False
    inyect=True
    for i in range(n):
        for j in range(n):
            for k in range(n):
                if (not (R[i][j]*R[j][k]==R[j==k][k==j])):
                    inyect = False


    print("Рефлексивность:", reflexive)
    print("Симметричность:", symmetric)
    print("Транзитивность:", transitive)
    print("Сюръективность:", suryect)
    print("Инъективность:", inyect)


def print_relation(R):
    for row in R:
        print(list(map(int, row)))


A1 = ["Иванов", "Петров", "Сидоров", "Петечкин", "Васечкин"]
n1 = len(A1)

R1 = [[0 for _ in range(n1)] for _ in range(n1)]
R1_list = [("Иванов", "Петров"), ("Петров", "Сидоров"),
           ("Иванов", "Петечкин")]  # отношение задано перечислением своих элементов

for p in R1_list:
    ind1 = A1.index(p[0])
    ind2 = A1.index(p[1])
    R1[ind1][ind2] = 1

print_relation(R1)
analyze_relation(R1)

A2 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
n2 = len(A2)


# отношение задается предикатом - логическим условием
def F2(x, y):  # здесь вы можете определить свой предикат на множестве A2
    return (x < y)


R2 = [[F2(A2[i], A2[j]) for j in range(n2)] for i in range(n2)]
print_relation(R2)
analyze_relation(R2)

A3 = A2
n3 = len(A3)


# отношение "иметь четную сумму"
def F3(x, y):
    return (x + y) % 2 == 0


R3 = [[F3(A3[i], A3[j]) for j in range(n3)] for i in range(n3)]
print_relation(R3)
analyze_relation(R3)
