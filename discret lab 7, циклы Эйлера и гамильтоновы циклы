def is_eulerian_cycle(graph):
    # Проверяем, является ли граф связным
    if not is_connected(graph):
        return False
    
    # Проверяем, являются ли все вершины степени четными
    for vertex in graph:
        if len(graph[vertex]) % 2 != 0:
            return False
    
    return True

def is_connected(graph):
    visited = set()
    stack = [next(iter(graph))]
    while stack:
        current_vertex = stack.pop()
        if current_vertex not in visited:
            visited.add(current_vertex)
            stack.extend(set(graph[current_vertex]) - visited)
    
    return len(visited) == len(graph)

# Пример ввода графа
n = 5
E = [(1, 2), (1, 3), (2, 3), (2, 4), (3, 4), (4, 5), (5, 1)]

# Создаем граф в виде словаря смежности
graph = {i: [] for i in range(1, n + 1)}
for edge in E:
    graph[edge[0]].append(edge[1])
    graph[edge[1]].append(edge[0])

# Проверяем наличие цикла Эйлера
if is_eulerian_cycle(graph):
    print("Граф содержит цикл Эйлера.")
else:
    print("Граф не содержит цикла Эйлера.")

  #2 задание

# put your python code here
from collections import defaultdict, Counter

import sys

sys.setrecursionlimit(100000000)

 

 

def rek(ar, cur, res):

    for x in ar[cur]:

        if ar[cur][x] > 0:

            ar[cur][x] -= 1

            ar[x][cur] -= 1

            res = rek(ar, x, res)

    return res + [cur]

 

 

n, e = map(int, input().split())

ar = defaultdict(Counter)

 

for _ in range(e):

    a, b = map(int, input().split())

    ar[a][b] += 1

    ar[b][a] += 1

 

res = rek(ar, 1, [])

print('NONE' if res[0] != res.pop() or len(set(res)) != n else ' '.join(map(str, res)))

#3 задание

from math import factorial

def prufer_to_tree(prufer_code):
    n = len(prufer_code) + 2
    degree = [1] * n

    for vertex in prufer_code:
        degree[vertex - 1] += 1

    tree = []

    for i in range(n - 2):
        for j in range(n):
            if degree[j] == 1:
                tree.append((vertex := (j + 1, prufer_code.pop(0))))
                degree[vertex[0] - 1] -= 1
                degree[vertex[1] - 1] -= 1
                break

    tree.append((vertex := (degree.index(1) + 1, degree.index(1, degree.index(1) + 1) + 1)))
    return tree

def factorial_power(n):
    result = 1
    for i in range(1, n + 1):
        result *= i
    return result

def hamiltonian_cycles_count(tree):
    n = len(tree) + 1
    return factorial_power(n - 2)

# Пример ввода: код Прюфера
prufer_code = [3, 3, 4, 5]

# Преобразуем код Прюфера в дерево
tree = prufer_to_tree(prufer_code)

# Рассчитываем количество гамильтоновых циклов
count = hamiltonian_cycles_count(tree)

print(f"Дерево: {tree}")
print(f"Количество гамильтоновых циклов: {count}")

#4 задание

def hamiltonian_cycles(graph, start, visited, path):
    visited[start] = True
    path.append(start)

    if len(path) == len(graph):
        print("Гамильтонов цикл:", path)
    else:
        for neighbor in graph[start]:
            if not visited[neighbor]:
                hamiltonian_cycles(graph, neighbor, visited.copy(), path.copy())

# Полный граф на 3 вершинах
graph_3 = {1: [2, 3], 2: [1, 3], 3: [1, 2]}

# Полный граф на 4 вершинах
graph_4 = {1: [2, 3, 4], 2: [1, 3, 4], 3: [1, 2, 4], 4: [1, 2, 3]}

# Тестирование на графе с 3 вершинами
print("Граф на 3 вершинах:")
hamiltonian_cycles(graph_3, 1, [False] * 3, [])

# Тестирование на графе с 4 вершинами
print("\nГраф на 4 вершинах:")
hamiltonian_cycles(graph_4, 1, [False] * 4, [])

#задание 5

from math import factorial

def max_hamiltonian_cycles(n):
    if n < 3:
        return 0
    return factorial(n-1) // 2

# Ввод значения n
n = int(input("Введите значение n: "))

# Расчет и вывод максимального количества гамильтоновых циклов
result = max_hamiltonian_cycles(n)
print(f"Максимальное количество гамильтоновых циклов в полном графе K_{n}: {result}")
